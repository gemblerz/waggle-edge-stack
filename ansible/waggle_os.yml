
# this playbook mainly installs waggle software and is intended to be used to create a waggle OS image

- name: waggle_os
  hosts: all
  become: yes
  #remote_user: root

  vars:
    REGISTRATION_VERSION: 2.1.3  # see https://github.com/waggle-sensor/node-registration-service/releases
    REV_TUNNEL_VERSION: 2.1.4  # see https://github.com/waggle-sensor/node-reverse-tunnel-service/releases
    NODE_ID_SERVICE_VERSION: 1.0.0  # see https://github.com/waggle-sensor/waggle-nodeid/releases


  tasks:

  - fail:
      msg: "Only 18.04 and 20.04 supported"
    when: ansible_distribution_version != "20.04" and ansible_distribution_version != "18.04"

  - name: apt-get update
    apt:
      update_cache: yes
  - name: Ensure a locale exists
    community.general.locale_gen:
      name: en_US.UTF-8
      state: present


  - name: Install ubuntu packages
    apt:
      name:
        - systemd-sysv=245.4-4ubuntu3.3  # is that a good idea? what if another version comes pre-installed ??
        - python3=3.8.2-0ubuntu2
        #- python3-pip=20.0.2-5ubuntu1.1
        - python3-venv=3.8.2-0ubuntu2  # what package needs this ?
      state: present
    when:
      - ansible_distribution_version == "20.04"

  - name: Install ubuntu packages
    apt:
      name:
        - systemd-sysv=237-3ubuntu10.44  # is that a good idea? what if another version comes pre-installed ??
        - python3=3.6.7-1~18.04
        #- python3-pip=9.0.1-2.3~ubuntu1.18.04.4
        - python3-venv=3.6.7-1~18.04  # what package needs this ?
      state: present
    when:
      - ansible_distribution_version == "18.04"


        #- ansible  # maybe needed if we run asyncronous (long-running) playbooks locally
        #- dnsmasq (rpi dhcp / pxe booting)
        #- network-manager
        #- nfs-kernel-server (rpi nfs)
        #- openssh-server
        #- rsyslog




  #- name: pip packages
  #  pip:
  #    name: openshift # needed for the community.kubernetes.k8s module

  # TODO remove !?
  - name: Create directory /etc/sage/
    file:
      path: /etc/sage/
      state: directory

  - name: Create directory /etc/waggle/
    file:
      path: /etc/waggle/
      state: directory


  - name: disable ubuntu motd-news
    lineinfile:
      dest: /etc/default/motd-news
      state: present
      regexp: '^ENABLED='
      line: 'ENABLED=0'
  - name: Creates directory
    file:
      path: /etc/update-motd.d/
      state: directory
  - name: Copy file with owner and permissions
    copy:
      src: 05-sage
      dest: /etc/update-motd.d/05-sage
      owner: root
      group: root
      mode: '0755'


  - name: check private/register.pem-cert.pub
    become: no
    local_action: stat path=private/register.pem-cert.pub
    register: register_cert

  - name: Copy register.pem-cert.pub if exists
    copy:
      src: private/register.pem-cert.pub
      dest: /etc/waggle/sage_registration-cert.pub
      owner: root
      group: root
      mode: '0644'
    when: register_cert.stat.exists

  - name: check private/register.pem
    become: no
    local_action: stat path=private/register.pem
    register: register_pem

  - name: Copy register.pem if exists
    copy:
      src: private/register.pem
      dest: /etc/waggle/sage_registration
      owner: root
      group: root
      mode: '0600'
    when: register_pem.stat.exists

  - name: check private/known_hosts
    become: no
    local_action: stat path=private/known_hosts
    register: known_hosts

  # TODO this may not be ideal as it would overwrite an existing file
  - name: Copy known_hosts if exists
    copy:
      src: private/known_hosts
      dest: /etc/ssh/ssh_known_hosts
      owner: root
      group: root
      mode: '0644'
    when: known_hosts.stat.exists


  - fail:
      msg: "Bailing out: this play requires variable 'beekeeper_registration_host'"
    when: beekeeper_registration_host is not defined

  - fail:
      msg: "Bailing out: this play requires variable 'beekeeper_registration_port'"
    when: beekeeper_registration_port is not defined



  # note that further config entries will be added later in the config playbook
  - name: config
    copy:
      dest: "/etc/waggle/config.ini"
      content: |
        # WARNING: Do not edit this file directly, this file is written by an ansible playbook
        [system]
        #devmode = true

        # by default this should be generated from the mac-address of the network device
        # e.g. 0000000000000001
        #node-id-override =

        [registration]
        host={{beekeeper_registration_host}}
        port={{beekeeper_registration_port}}
        user=sage_registration

        [hardware]
        # use network-interface if default does not work
        # e.g. enp0s3 , eth0
        # network-interface = {{ ansible_default_ipv4.interface }}


  # node id service
  - name: Download node id service
    get_url:
       url: "https://github.com/waggle-sensor/waggle-nodeid/releases/download/v{{NODE_ID_SERVICE_VERSION}}/waggle-nodeid_{{NODE_ID_SERVICE_VERSION}}_all.deb"
       dest: "/tmp/waggle-nodeid_{{NODE_ID_SERVICE_VERSION}}_all.deb"

  - name: Install node id service service (but do not start)
    apt:
      deb: "/tmp/waggle-nodeid_{{NODE_ID_SERVICE_VERSION}}_all.deb"
      policy_rc_d: 101

  # waggle-registration
  - name: Download waggle-registration service
    get_url:
       url: "https://github.com/waggle-sensor/beekeeper-registration/releases/download/v{{REGISTRATION_VERSION}}/waggle-registration_{{REGISTRATION_VERSION}}_all.deb"
       dest: "/tmp/waggle-registration_{{REGISTRATION_VERSION}}_all.deb"

  - name: Install waggle-registration service (but do not start)
    apt:
      deb: "/tmp/waggle-registration_{{REGISTRATION_VERSION}}_all.deb"
      policy_rc_d: 101

  # waggle-reverse-tunnel
  - name: Download waggle-reverse-tunnel service
    get_url:
       url: "https://github.com/waggle-sensor/node-reverse-tunnel-service/releases/download/v{{REV_TUNNEL_VERSION}}/waggle-reverse-tunnel_{{REV_TUNNEL_VERSION}}_all.deb"
       dest: "/tmp/waggle-reverse-tunnel_{{REV_TUNNEL_VERSION}}_all.deb"

  - name: Install waggle-reverse-tunnel service (but do not start)
    apt:
      deb: "/tmp/waggle-reverse-tunnel_{{REV_TUNNEL_VERSION}}_all.deb"
      policy_rc_d: 101





  # TODO remove (this should be in debian package)
  #- name: install kubernetes python lib for sagebk-registration
  #  pip:
  #    name: kubernetes==12.0.1


  # TODO remove
  #- name: Get latest waggle-registration.py (for testing purposes)
  #  get_url:
  #    url: https://raw.githubusercontent.com/waggle-sensor/node-registration-service/master/waggle-registration.py
  #    dest: /usr/bin/waggle-registration.py
  #    mode: '0755'
  #    force: yes

  # TODO remove
  #- name: Get latest waggle-reverse-tunnel.sh (for testing purposes)
  #  get_url:
  #    url: https://raw.githubusercontent.com/waggle-sensor/node-reverse-tunnel-service/main/waggle-reverse-tunnel.sh
  #    dest: /usr/bin/waggle-reverse-tunnel.sh
  #    mode: '0755'
  #    force: yes

  # TODO remove
  #- name: Restart sagebk-registration.service
  #  systemd:
  #    state: restarted
  #    name: sagebk-registration.service

  # TODO remove
  #- name: Restart sagebk-reverse-tunnel.service
  #  systemd:
  #    state: restarted
  #    name: sagebk-reverse-tunnel.service



  - name: waggle-services-list
    copy:
      dest: "/usr/local/bin/waggle-services-list"
      owner: root
      group: root
      mode: '0755'
      content: |
        #!/bin/sh
        systemctl list-units -t service --full --all --plain --no-legend | grep '^\(sage\|waggle\)'

 # TODO: (if we keep it) prevent start at this point, start later
- name: docker
  import_playbook: install-docker-playbook.yml






- name: install k3s (do not run yet)
  hosts: all
  become: yes
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

  # https://github.com/rancher/k3s-ansible

  tasks:
    - name: install k3s (without starting)
      args:
        warn: false  # ansible is unhappy about curl
      shell: curl -sfL https://get.k3s.io | INSTALL_K3S_SKIP_START=1 sh -
      # INSTALL_K3S_SKIP_START this will prevent start of k3s
      # TODO: use INSTALL_K3S_VERSION


    - name: copy kubernetes resource files to node
      copy:
        # ansible expects files in subfolder "files" (which does not exist), but we can get outside using "../"
        src: ../kubernetes
        dest: /opt/sage/



